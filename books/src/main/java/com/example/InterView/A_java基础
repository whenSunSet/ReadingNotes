重载的签名：方法名+参数类型+参数顺序(返回值不是)

涉及到基本类型重载：基本类型可以从小类型升为大类型所以
1.如果是数字那么遵循5，5f，5d，5l这种放置方式
2.如果传入参数小于方法中声明参数，那么类型会被提升
3.char如果找不到会被提升为int
4.如果传入参数大于声明参数，那么需要类型转换。

构造器中调用构造器必须把构造器放开头。

finalize的工作原理应该是这样的：一旦垃圾收集器准备好释放对象占用的存储空间，它首先调用finalize()，而且只有在下一次垃圾收集过程中，
才会真正回收对象的内存.所以如果使用finalize()，就可以在垃圾收集期间进行一些重要的清除或清扫工作，此外垃圾回收并不保证一定会调用它，
所以可以说它和对象被回收没有必然关系。

成员变量会自动初始化，局部变量需要手动初始化，成员变量自动初始化在构造器初始化之前。
有一个Dog类：
1.即使没有static，构造器其实也是静态方法，所以当首次创建Dog时或者Dog的静态域或者静态方法被访问的时候，Dog的class对象会被加载。
3.在加载Dog的时候可能会发现其有基类，此时先暂停Dog的加载，转而去加载基类。所以基类的static域比子类先初始化。
2.载入class文件之后，会创建一个该该类的class对象，所有关于静态初始化的动作会被执行，所以静态初始化只在Class对象首次加载时进行一次。
3.当使用new的时候，首先为Dog对象在堆上分配足够内存空间。
4.这块内存控件会被清零，所有实例都被初始化成了默认值，包括基类。
5.执行所有字段定义处的初始化，从基类开始。
6.执行构造器。(在第一行会执行基类的构造器)

对象的销毁是按照创建的逆序来进行的。

final的方法和类都不允许覆盖和继承。private默认实现了final。

对于多态来说，只有普通的方法调用可以是多态的

如果在一个构造器内部调用某个正在构造的对象的动态绑定方法如：我在new一个子类的时候，基类中调用了在子类中被覆盖的方法。那么此时会怎么样的。
1.在基类中被调用被子类覆盖的方法，那么这个调用就是调用子类的方法。
2.由于子类正在初始化，所以如果该方法中使用了子类的域，那么可能会出现与预期值不符合 的情况。
3.所以编写构造器时：尽可能使用简单的方法是对象进入正常状态，避免调用其他方法，构造器中唯一能安全的调用的方法是基类中的final和private方法。

内部类的特点：
1.内部类只能在与其外围类的对象关联的情况下才能被创建(非static)
2.内部类在创建的时候，捕获了一个外围类的对象，所以能访问外围类的private对象。(非static)
3.如果其他类对内部类有访问权限的话（如public），那么可以通过  外围类对象.new 内部类() ,
这样的方式创建内部对象，注意如果没有外围类的对象，内部类是不允许创建的。(非static)
4.多层嵌套的内部类能够透明的访问所有外围类的所有成员。
5.内部类不能被覆盖
6.内部类让java模拟了多继承，让外围类继承一个类，然后内部类继承一个类，又要有内部类对象必须有对应的外围类对象。
7.static的内部类，和普通的类基本相同。

特别的内部类：
1.内部类可以放在方法和作用域中，出了方法和作用域该类就不能被访问。
2.匿名的内部类可以通过初始化域｛｝来实现构造器的功能，只不过不能重载。
3.匿名的内部类可以执行字段的定义和初始化。

finally不管是关于return还是break还是continue都能运行。



